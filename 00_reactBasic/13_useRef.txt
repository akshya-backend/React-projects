React useRef Deep Dive

1. Introduction to useRef
- useRef is a React hook that allows you to persist values across renders without causing re-renders.
- It returns a mutable ref object whose `.current` property can hold any value.
- Commonly used to reference DOM elements or to store mutable values.

2. Syntax
const refContainer = useRef(initialValue);

- refContainer is an object like: { current: initialValue }
- You can read or mutate `refContainer.current`.

3. Core Characteristics
- Persistent: Value stored in `ref.current` survives re-renders.
- Mutable: You can change it directly without triggering a re-render.
- No re-renders: Updating `ref.current` does not cause the component to re-render.

4. Primary Use Cases
A. Accessing DOM elements
   - Example: focusing an input element
   const inputRef = useRef();
   useEffect(() => {
       inputRef.current.focus();
   }, []);
   return <input ref={inputRef} />;

B. Storing mutable values
   - Example: storing previous value without causing re-renders
   const countRef = useRef(0);
   countRef.current++;

C. Storing previous props/state
   - Example: tracking previous value of a prop
   const prevValue = useRef();
   useEffect(() => {
       prevValue.current = value;
   }, [value]);

D. Timeout/interval references
   - Useful for clearing intervals or timeouts
   const timerRef = useRef(null);
   useEffect(() => {
       timerRef.current = setInterval(() => console.log('tick'), 1000);
       return () => clearInterval(timerRef.current);
   }, []);

5. Difference between useRef and useState
- useRef: mutable container, does not cause re-renders.
- useState: immutable state, triggers re-renders when updated.

6. Common Pitfalls
- Forgetting that changing ref doesnâ€™t re-render UI.
- Using ref for values that should trigger re-render (should use state instead).
- Accessing ref before DOM is rendered.

7. Advanced Patterns
- Storing imperative handles (with forwardRef and useImperativeHandle).
- Avoiding stale closures by storing callback refs inside `useRef`.
